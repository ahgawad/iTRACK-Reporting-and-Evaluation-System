# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2019-01-19 18:31
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PerformanceIndicator',
            fields=[
                ('piid', models.AutoField(primary_key=True, serialize=False, verbose_name='Log Indicator ID')),
                ('indicator_name', models.CharField(max_length=200)),
                ('indicator_unit', models.CharField(max_length=50)),
                ('is_average', models.BooleanField(default=False)),
                ('is_inverted', models.BooleanField(default=False)),
                ('user_related', models.BooleanField(default=False)),
                ('indicator_whereabouts', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceIndicatorValue',
            fields=[
                ('pivid', models.AutoField(primary_key=True, serialize=False, verbose_name='Log Indicator Value ID')),
                ('indicator_value', models.IntegerField(default=0)),
                ('indicator_value_log_timestamp', models.DateTimeField()),
                ('icid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ITRACKComponent')),
                ('mid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Mission')),
                ('piid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='perform.PerformanceIndicator')),
                ('taid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Task')),
                ('thid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Threat')),
                ('uid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sop_policy',
            fields=[
                ('spid', models.AutoField(primary_key=True, serialize=False, verbose_name='SOP Policy ID')),
                ('Tag', models.IntegerField(choices=[(1, 'Travel-General SOP/Policy'), (2, 'Travel-Convoy SOP/Policy'), (3, 'Travel-Checkpoint SOP/Policy'), (4, 'Travel-landmine SOP/Policy'), (5, 'Travel-Crossfire SOP/Policy'), (6, 'Travel-Kidnap SOP/Policy'), (7, 'Home SOP/Policy'), (8, 'Office-Project site SOP/Policy'), (9, 'Mob violance SOP/Policy'), (10, 'First aid SOP/Policy'), (11, 'Abduction SOP/Policy'), (12, 'Hostage or detention SOP/Policy'), (13, 'SRM General SOP/Policy')], default='1')),
                ('Importance', models.IntegerField(choices=[(1, 'Must-Have SOP/Policy'), (2, 'Important SOP/Policy'), (3, 'Nice-to-Have SOP/Policy')], default='2')),
                ('Ds_level', models.CharField(choices=[('O', 'Operational'), ('T', 'Tactical'), ('S', 'Strategic')], default='O', max_length=1)),
                ('Sop_policy', models.CharField(choices=[('S', 'SOP'), ('P', 'Policy')], default='S', max_length=1)),
                ('Measure_family', models.CharField(blank=True, max_length=50)),
                ('Measure_type', models.CharField(blank=True, max_length=50)),
                ('Measure_description', models.TextField(max_length=1000)),
                ('Prerequesit_sop_policy', models.CharField(blank=True, max_length=100)),
                ('Implementation_stage', models.CharField(choices=[('P', 'Precautionary'), ('A', 'Adaptive')], default='P', max_length=1)),
                ('Means_of_attack', models.CharField(choices=[('*', 'Any'), ('AB', 'Aerial bombardment/missile/mortar/RPG/lobbed grenade'), ('BA', 'Bodily assault/beating/stabbing with non-fire weapons or no weapons'), ('BA-K', 'Bodily assault/beating/stabbing with non-fire weapons or no weapons -> Kidnapping (not killed)'), ('B', 'Bombing (set explosives with a stationary target: building: facility: home)'), ('BBIED', 'Body-borne IED'), ('CX', 'Complex attack (explosives in conjunction with small arms)'), ('CX-K', 'Complex attack (explosives in conjunction with small arms) -> Kidnapping (not killed)'), ('RIED', 'Roadside IED'), ('VBIED', 'Vehicle-born IED (unknown whether remote control or suicide)'), ('VBIED-RC', 'Vehicle-borne IED (remote control detonation)'), ('VBIED-S', 'Vehicle-borne IED (suicide)'), ('S-K', 'Shooting (small arms / light weapons: e.g. pistols: rifles: machine guns) -> Kidnapping (not killed)'), ('S-KK', 'Shooting (small arms / light weapons: e.g. pistols: rifles: machine guns)) -> Kidnap-killing'), ('S-RSA', 'Shooting (small arms / light weapons: e.g. pistols: rifles: machine guns) -> Rape or serious sexual assault'), ('LM', 'Landmine or UXO detonation'), ('S', 'Shooting (small arms / light weapons: e.g. pistols: rifles: machine guns)')], default='*', max_length=10)),
                ('Attack_context', models.CharField(choices=[('*', 'Any'), ('Am', 'Ambush/attack on road'), ('C', 'Combat (or police operations) / Crossfire'), ('IA', 'Individual attack or assassination'), ('MV', 'Mob violence: rioting'), ('R', 'Raid (armed incursion by group on home: office: or project site)'), ('D', 'Detention (by official government forces or police: where abuse takes place)')], default='*', max_length=10)),
                ('Location', models.CharField(choices=[('*', 'Any'), ('H', 'Home (private home: not compound)'), ('OC', 'Office or organization compound/residence'), ('PS', 'Project site (village: camp: distribution point: hospital: etc.)'), ('P', 'Other public location (street: market: restaurant: etc.)'), ('R', 'Road (in transit)'), ('C', 'Custody (official forces/police)')], default='*', max_length=10)),
                ('Country', models.CharField(choices=[('*', 'Any'), ('syria', 'Syrian Arab Republic'), ('iraq', 'Iraq'), ('yemen', 'Yemen')], default='*', max_length=32)),
                ('Mcda_criteria', models.CharField(blank=True, max_length=50)),
                ('Mcda_points', models.IntegerField(default=0)),
                ('Implementation_cost', models.IntegerField(default=0)),
                ('Cost_type', models.CharField(choices=[('O', 'Overall'), ('I', 'Individual')], default='O', max_length=1)),
                ('Measure_source', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'verbose_name': 'SOP/Policy',
                'verbose_name_plural': 'SOPs/Policies',
            },
        ),
        migrations.CreateModel(
            name='Sop_policy_damage_mitigation',
            fields=[
                ('spdmid', models.AutoField(primary_key=True, serialize=False, verbose_name='Damage mitigation type ID')),
                ('Damage_type', models.CharField(choices=[('*', 'Any'), ('KK', 'Staff killed'), ('K', 'Staff kidnapped'), ('W', 'Staff wounded'), ('RSA', 'Staff raped'), ('B', 'Damage in buildings'), ('V', 'Damage in vehicles'), ('C', 'Damage in commodities'), ('E', 'Damage in equipment')], default='*', max_length=10)),
                ('Damage_mitigation_fraction', models.FloatField(default=0)),
                ('Sop_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='perform.Sop_policy')),
            ],
        ),
        migrations.CreateModel(
            name='Sop_policySurveyAnswer',
            fields=[
                ('spsaid', models.AutoField(primary_key=True, serialize=False, verbose_name='SOPs/Policies Survey Answer ID')),
                ('Means_of_attack', models.CharField(choices=[('*', 'Any'), ('AB', 'Aerial bombardment/missile/mortar/RPG/lobbed grenade'), ('BA', 'Bodily assault/beating/stabbing with non-fire weapons or no weapons'), ('BA-K', 'Bodily assault/beating/stabbing with non-fire weapons or no weapons -> Kidnapping (not killed)'), ('B', 'Bombing (set explosives with a stationary target: building: facility: home)'), ('BBIED', 'Body-borne IED'), ('CX', 'Complex attack (explosives in conjunction with small arms)'), ('CX-K', 'Complex attack (explosives in conjunction with small arms) -> Kidnapping (not killed)'), ('RIED', 'Roadside IED'), ('VBIED', 'Vehicle-born IED (unknown whether remote control or suicide)'), ('VBIED-RC', 'Vehicle-borne IED (remote control detonation)'), ('VBIED-S', 'Vehicle-borne IED (suicide)'), ('S-K', 'Shooting (small arms / light weapons: e.g. pistols: rifles: machine guns) -> Kidnapping (not killed)'), ('S-KK', 'Shooting (small arms / light weapons: e.g. pistols: rifles: machine guns)) -> Kidnap-killing'), ('S-RSA', 'Shooting (small arms / light weapons: e.g. pistols: rifles: machine guns) -> Rape or serious sexual assault'), ('LM', 'Landmine or UXO detonation'), ('S', 'Shooting (small arms / light weapons: e.g. pistols: rifles: machine guns)')], default='*', max_length=10)),
                ('Attack_context', models.CharField(choices=[('*', 'Any'), ('Am', 'Ambush/attack on road'), ('C', 'Combat (or police operations) / Crossfire'), ('IA', 'Individual attack or assassination'), ('MV', 'Mob violence: rioting'), ('R', 'Raid (armed incursion by group on home: office: or project site)'), ('D', 'Detention (by official government forces or police: where abuse takes place)')], default='*', max_length=10)),
                ('Location', models.CharField(choices=[('*', 'Any'), ('H', 'Home (private home: not compound)'), ('OC', 'Office or organization compound/residence'), ('PS', 'Project site (village: camp: distribution point: hospital: etc.)'), ('P', 'Other public location (street: market: restaurant: etc.)'), ('R', 'Road (in transit)'), ('C', 'Custody (official forces/police)')], default='*', max_length=10)),
                ('Country', models.CharField(choices=[('*', 'Any'), ('syria', 'Syrian Arab Republic'), ('iraq', 'Iraq'), ('yemen', 'Yemen')], default='*', max_length=32)),
                ('answer_timestamp', models.DateTimeField(auto_now_add=True)),
                ('mid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Mission')),
                ('uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sop_policySurveyQuestionAnswer',
            fields=[
                ('spsqaid', models.AutoField(primary_key=True, serialize=False, verbose_name='SOPs Policyies Survey Question Answer ID')),
                ('answer_value', models.BooleanField(default=False)),
                ('spid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='perform.Sop_policy')),
                ('spsaid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='perform.Sop_policySurveyAnswer')),
            ],
        ),
    ]
